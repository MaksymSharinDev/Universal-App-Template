/* tslint:disable */
/* eslint-disable */

// ######################################## THIS FILE WAS GENERATED BY MONGOOSE-TSGEN ######################################## //

// NOTE: ANY CHANGES MADE WILL BE OVERWRITTEN ON SUBSEQUENT EXECUTIONS OF MONGOOSE-TSGEN.

import mongoose from 'mongoose'

/**
 * Lean version of ExampleCodeDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ExampleDocument.toObject()`.
 * ```
 * const exampleObject = example.toObject();
 * ```
 */
export type ExampleCode = {
    code: number
    _id: mongoose.Types.ObjectId
}

/**
 * Lean version of ExampleDocument
 *
 * This has all Mongoose getters & functions removed. This type will be returned from `ExampleDocument.toObject()`. To avoid conflicts with model names, use the type alias `ExampleObject`.
 * ```
 * const exampleObject = example.toObject();
 * ```
 */
export type Example = {
    myCustomField: string
    password: string
    firstName: string
    email: string
    someField: string
    codes: ExampleCode[]
    _id: mongoose.Types.ObjectId
}

/**
 * Lean version of ExampleDocument (type alias of `Example`)
 *
 * Use this type alias to avoid conflicts with model names:
 * ```
 * import { Example } from "../models"
 * import { ExampleObject } from "../interfaces/mongoose.gen.ts"
 *
 * const exampleObject: ExampleObject = example.toObject();
 * ```
 */
export type ExampleObject = Example

/**
 * Mongoose Query types
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Example = mongoose.model<ExampleDocument, ExampleModel>("Example", ExampleSchema);
 * ```
 */
export type ExampleQueries = {}

export type ExampleMethods = {}

export type ExampleStatics = {}

/**
 * Mongoose Model type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Example = mongoose.model<ExampleDocument, ExampleModel>("Example", ExampleSchema);
 * ```
 */
export type ExampleModel = mongoose.Model<ExampleDocument, ExampleQueries> & ExampleStatics

/**
 * Mongoose Schema type
 *
 * Assign this type to new Example schema instances:
 * ```
 * const ExampleSchema: ExampleSchema = new mongoose.Schema({ ... })
 * ```
 */
export type ExampleSchema = mongoose.Schema<ExampleDocument, ExampleModel>

/**
 * Mongoose Subdocument type
 *
 * Type of `ExampleDocument["codes"]` element.
 */
export type ExampleCodeDocument = mongoose.Types.Subdocument & {
    code: number
    _id: mongoose.Types.ObjectId
}

/**
 * Mongoose Document type
 *
 * Pass this type to the Mongoose Model constructor:
 * ```
 * const Example = mongoose.model<ExampleDocument, ExampleModel>("Example", ExampleSchema);
 * ```
 */
export type ExampleDocument = mongoose.Document<mongoose.Types.ObjectId, ExampleQueries> &
    ExampleMethods & {
        myCustomField: string
        password: string
        firstName: string
        email: string
        someField: string
        codes: mongoose.Types.DocumentArray<ExampleCodeDocument>
        _id: mongoose.Types.ObjectId
    }

/**
 * Check if a property on a document is populated:
 * ```
 * import { IsPopulated } from "../interfaces/mongoose.gen.ts"
 *
 * if (IsPopulated<UserDocument["bestFriend"]>) { ... }
 * ```
 */
export function IsPopulated<T>(doc: T | mongoose.Types.ObjectId): doc is T {
    return doc instanceof mongoose.Document
}

/**
 * Helper type used by `PopulatedDocument`. Returns the parent property of a string
 * representing a nested property (i.e. `friend.user` -> `friend`)
 */
type ParentProperty<T> = T extends `${infer P}.${string}` ? P : never

/**
 * Helper type used by `PopulatedDocument`. Returns the child property of a string
 * representing a nested property (i.e. `friend.user` -> `user`).
 */
type ChildProperty<T> = T extends `${string}.${infer C}` ? C : never

/**
 * Helper type used by `PopulatedDocument`. Removes the `ObjectId` from the general union type generated
 * for ref documents (i.e. `mongoose.Types.ObjectId | UserDocument` -> `UserDocument`)
 */
type PopulatedProperty<Root, T extends keyof Root> = Omit<Root, T> & {
    [ref in T]: Root[T] extends mongoose.Types.Array<infer U>
        ? mongoose.Types.Array<Exclude<U, mongoose.Types.ObjectId>>
        : Exclude<Root[T], mongoose.Types.ObjectId>
}

/**
 * Populate properties on a document type:
 * ```
 * import { PopulatedDocument } from "../interfaces/mongoose.gen.ts"
 *
 * function example(user: PopulatedDocument<UserDocument, "bestFriend">) {
 *   console.log(user.bestFriend._id) // typescript knows this is populated
 * }
 * ```
 */
export type PopulatedDocument<DocType, T> = T extends keyof DocType
    ? PopulatedProperty<DocType, T>
    : ParentProperty<T> extends keyof DocType
    ? Omit<DocType, ParentProperty<T>> & {
          [ref in ParentProperty<T>]: DocType[ParentProperty<T>] extends mongoose.Types.Array<infer U>
              ? mongoose.Types.Array<ChildProperty<T> extends keyof U ? PopulatedProperty<U, ChildProperty<T>> : PopulatedDocument<U, ChildProperty<T>>>
              : ChildProperty<T> extends keyof DocType[ParentProperty<T>]
              ? PopulatedProperty<DocType[ParentProperty<T>], ChildProperty<T>>
              : PopulatedDocument<DocType[ParentProperty<T>], ChildProperty<T>>
      }
    : DocType

/**
 * Helper types used by the populate overloads
 */
type Unarray<T> = T extends Array<infer U> ? U : T
type Modify<T, R> = Omit<T, keyof R> & R

/**
 * Augment mongoose with Query.populate overloads
 */
declare module 'mongoose' {
    interface Query<ResultType, DocType extends Document, THelpers = {}> {
        populate<T extends string>(
            path: T,
            select?: string | any,
            model?: string | Model<any, THelpers>,
            match?: any
        ): Query<
            ResultType extends Array<DocType>
                ? Array<PopulatedDocument<Unarray<ResultType>, T>>
                : ResultType extends DocType
                ? PopulatedDocument<Unarray<ResultType>, T>
                : ResultType,
            DocType,
            THelpers
        > &
            THelpers

        populate<T extends string>(
            options: Modify<PopulateOptions, { path: T }> | Array<PopulateOptions>
        ): Query<
            ResultType extends Array<DocType>
                ? Array<PopulatedDocument<Unarray<ResultType>, T>>
                : ResultType extends DocType
                ? PopulatedDocument<Unarray<ResultType>, T>
                : ResultType,
            DocType,
            THelpers
        > &
            THelpers
    }
}
